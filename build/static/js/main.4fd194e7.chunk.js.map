{"version":3,"sources":["components/01_setStateExtension/index.jsx","components/02_lazyLoad/Loading/index.jsx","components/02_lazyLoad/index.jsx","components/03_stateHook/index.jsx","components/04_effectHook/index.jsx","components/05_refHook/index.jsx","components/06_Context/index.jsx","components/07_ComponentOptimiza/index.jsx","components/08_renderProp/index.jsx","components/09_errorBoundary/Child.jsx","components/09_errorBoundary/index.jsx","App.js","index.js"],"names":["SetStateExtension","state","count","handleAdd","setState","props","console","log","this","style","marginLeft","onClick","Component","Loading","Home","lazy","About","LazyLoad","className","to","fallback","path","component","StateHook","React","useState","setCount","name","setName","EffectHook","useEffect","timer","setInterval","clearInterval","ReactDOM","unmountComponentAtNode","document","getElementById","RefHook","inputRef","useRef","type","ref","alert","current","value","MyContext","createContext","Provider","Consumer","A","age","B","C","context","D","contextType","Parent","car","students","handleChange","carName","PureComponent","Child","render","map","item","id","hasError","error","errorInfo","App","margin","StrictMode"],"mappings":"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","file":"static/js/main.4fd194e7.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SetStateExtension extends Component {\n    state = {count: 0}\n    handleAdd = () => {\n        // const {count} = this.state\n        /*\n                this.setState({count:count+1}) //setState的更新是异步的\n                console.log(this.state.count) // 0\n\n        */\n\n\n        /*\n\n            // 1.setState 对象式写法\n             this.setState({count: count + 1}, () => {\n                 //回调函数中可以拿到更新后的值\n                 console.log(this.state.count) // 1\n             })\n\n         */\n\n        // 2.setState函数式写法\n        this.setState((state, props) => {\n            return {count: state.count + 1}\n        }, () => {\n            //回调函数中可以拿到更新后的值\n            console.log(this.state.count) // 1\n        })\n    }\n    com\n\n    render() {\n        const {count} = this.state\n        return (\n            <div style={{marginLeft:\"40px\"}}>\n                <h3>当前的和为:{count}</h3>\n                <button onClick={this.handleAdd}>点我+1</button>\n\n            </div>\n        );\n    }\n}\n\nexport default SetStateExtension;","import React, {Component} from 'react';\n\nclass Loading extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Loading.....</h2>\n            </div>\n        );\n    }\n}\n\nexport default Loading;","import React, {Component, lazy, Suspense} from 'react';\nimport {Link, Route} from 'react-router-dom'\nimport Loading from \"./Loading\"\n// import Home from \"./Home\"\n// import About from \"./About\"\nconst Home = lazy(() => import('./Home'))\nconst About = lazy(() => import('./About'))\n\nclass LazyLoad extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-xs-offset-2 col-xs-8\">\n                        <div className=\"page-header\"><h2>React Router Demo</h2></div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-2 col-xs-offset-2\">\n                        <div className=\"list-group\">\n                            {/*编写路由链接*/}\n                            <Link className=\"list-group-item\" to=\"/about\">About</Link>\n                            <Link className=\"list-group-item\" to=\"/home\">Home</Link>\n                            {/*     <a className=\"list-group-item\" href=\"./about.html\">About</a>\n                            <a className=\"list-group-item active\" href=\"./home.html\">Home</a>*/}\n                        </div>\n                    </div>\n                    <div className=\"col-xs-6\">\n                        <div className=\"panel\">\n                            <div className=\"panel-body\">\n                                <Suspense fallback={<Loading/>}>\n                                    {/*注册路由*/}\n                                    <Route path=\"/about\" component={About}/>\n                                    <Route path=\"/home\" component={Home}/>\n                                </Suspense>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default LazyLoad;","import React from 'react';\n\n/*\nclass StateHook extends React.Component {\n    state = {count: 0}\n    handleAdd = () => {\n        this.setState((state, props) => {\n            return {count: state.count + 1}\n        }, () => {\n            //回调函数中可以拿到更新后的值\n            console.log(this.state.count) // 1\n        })\n    }\n\n    render() {\n        const {count} = this.state\n        return (\n            <div>\n                <h2>当前的和为:{count}</h2>\n                <button onClick={this.handleAdd}>点我+1</button>\n\n            </div>\n        );\n    }\n}\n*/\nfunction StateHook() {\n    const [count, setCount] = React.useState(0)\n    const [name, setName] = React.useState('张三')\n\n    function handleAdd() {\n        setCount(count => {\n            return count + 1\n        })\n    }\n\n    function handleChange() {\n        setName('李四')\n    }\n\n    return (\n        <div style={{marginLeft:\"40px\"}}>\n            <h3>当前的和为:{count}</h3>\n            <button onClick={handleAdd}>点我+1</button>\n            <h3>我的名字是:{name}</h3>\n            <button onClick={handleChange}>改变我的名字</button>\n        </div>\n    )\n}\n\nexport default StateHook;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*class EffectHook extends React.Component {\n    state = {count: 0}\n    handleAdd = () => {\n        this.setState((state, props) => {\n            return {count: state.count + 1}\n        }, () => {\n            //回调函数中可以拿到更新后的值\n            console.log(this.state.count) // 1\n        })\n    }\n    unload =()=>{\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n    }\n    componentDidMount() {\n        this.timer = setInterval(()=>{\n            this.setState(state=>({count: state.count+1}))\n        },1000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer)\n    }\n\n\n    render() {\n        const {count} = this.state\n        return (\n            <div>\n                <h2>当前的和为:{count}</h2>\n                <button onClick={this.handleAdd}>点我+1</button>&nbsp;\n                <button onClick={this.unload}>卸载组件</button>\n\n            </div>\n        );\n    }\n}*/\n\nfunction EffectHook() {\n    const [count, setCount] = React.useState(0)\n    React.useEffect(() => {\n        let timer = setInterval(() => {\n            setCount(count => count + 1)\n        }, 1000)\n        return () => {\n            clearInterval(timer)\n        }\n    }, [count])\n\n\n    function handleAdd() {\n        setCount(count => {\n            return count + 1\n        })\n    }\n    function unmount() {\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n    }\n\n    return (\n        <div style={{marginLeft: \"40px\"}}>\n            <h3>当前的和为:{count}</h3>\n            <button onClick={handleAdd}>点我+1</button>\n            &nbsp;\n            <button onClick={unmount}>卸载组件</button>\n\n        </div>\n    )\n}\n\nexport default EffectHook;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*class RefHook extends React.Component {\n    inputRef = React.createRef()\n    state = {count: 0}\n    showInput = () => {\n        alert(this.inputRef.current.value)\n    }\n    handleAdd = () => {\n        this.setState((state, props) => {\n            return {count: state.count + 1}\n        }, () => {\n            //回调函数中可以拿到更新后的值\n            console.log(this.state.count) // 1\n        })\n    }\n    unload =()=>{\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n    }\n    componentDidMount() {\n        this.timer = setInterval(()=>{\n            this.setState(state=>({count: state.count+1}))\n        },1000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer)\n    }\n\n\n    render() {\n        const {count} = this.state\n        return (\n            <div>\n                <input type=\"text\" ref={this.inputRef}/>\n                <h2>当前的和为:{count}</h2>\n                <button onClick={this.handleAdd}>点我+1</button>&nbsp;\n                <button onClick={this.unload}>卸载组件</button>\n                <button onClick={this.showInput}>展示input内容</button>\n\n            </div>\n        );\n    }\n}*/\n\nfunction RefHook() {\n    const inputRef = React.useRef()\n    const [count, setCount] = React.useState(0)\n    React.useEffect(() => {\n        let timer = setInterval(() => {\n            setCount(count => count + 1)\n        }, 1000)\n        return () => {\n            clearInterval(timer)\n        }\n    }, [count])\n\n\n    function handleAdd() {\n        setCount(count => {\n            return count + 1\n        })\n    }\n    function unmount() {\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'))\n    }\n    function showInput(){\n        alert(inputRef.current.value)\n    }\n\n    return (\n\n        <div style={{marginLeft: \"40px\"}}>\n\n            <input type=\"text\" ref={inputRef}/>\n            <h3>当前的和为:{count}</h3>\n            <button onClick={handleAdd}>点我+1</button>\n            &nbsp;\n            <button onClick={unmount}>卸载组件</button>\n            &nbsp;\n            <button onClick={showInput}>展示input框内容</button>\n\n        </div>\n    )\n}\n\nexport default RefHook;","import React, {Component} from 'react';\nimport './index.css'\n\nconst MyContext = React.createContext()\nconst {Provider, Consumer} = MyContext\n\nclass A extends Component {\n    state = {name: 'Jackson', age: 19}\n\n    render() {\n        const {name, age} = this.state\n        return (\n            <div className=\"parent\">\n                <h5>我是A组件（父组件):我叫{name},年龄:{age}</h5>\n                <Provider value={{name, age}}>\n                    <B/>\n                </Provider>\n\n            </div>\n        );\n    }\n}\n\nclass B extends Component {\n    render() {\n        return (\n            <div className=\"child\">\n                <h5>我是B组件(子组件)</h5>\n                <C/>\n            </div>\n        );\n    }\n}\n\nclass C extends Component {\n    static contextType = MyContext\n\n    render() {\n        console.log(this.context)\n        return (\n            <div className=\"grand\">\n                <h5>我是C组件(孙子组件)</h5>\n                <h5>从A组件传过来的值:我叫{this.context.name},年龄:{this.context.age}</h5>\n                <D/>\n            </div>\n        );\n    }\n}\n\nfunction D() {\n    return (\n        <div className=\"ggrand\">\n            <h5>我是D组件(曾孙函数组件)\n                <span>\n                    <Consumer>\n                        {\n                            value => (`从A组件传过来的数据：我叫${value.name},年龄${value.age}`)\n                        }\n                    </Consumer>\n                </span>\n            </h5>\n        </div>\n    );\n}\n\nexport default A;","import React, {Component,PureComponent} from 'react';\nimport './index.css'\n\nclass Parent extends PureComponent {\n    state={car:'五菱',students:['a','b','c']}\n    handleChange = ()=>{\n        this.setState({car:\"QQ\"})\n        //PureComponent要直接修改state数据，下面的修改原先的students对象\n     /*\n     const {students} = this.state\n        students.unshift('G')\n        this.setState({students})\n        */\n        const {students} = this.state\n        this.setState({students:['G',...students]})\n\n    }\n    render() {\n        console.log('parent---render')\n        const {car,students}= this.state\n        return (\n            <div className=\"parent\">\n              <h5>我是父组件：{car}</h5>\n              <h5>学生:{students}</h5>\n                <button onClick={this.handleChange}>改变车</button>\n                <Child carName={this.state.car}/>\n            </div>\n        );\n    }\n}\nclass Child extends Component {\n    render() {\n        console.log('child---render')\n        return (\n            <div className=\"child\">\n                <h5>我是子组件</h5>\n                <h5>父组件传过来的车为:{this.props.carName}</h5>\n            </div>\n        );\n    }\n}\n\nexport default Parent;","import React, {PureComponent} from 'react';\nimport './index.css'\n\nclass Parent extends PureComponent {\n    state = {car: '五菱'}\n\n    render() {\n        const {car} = this.state\n        return (\n            <div className=\"parent\">\n                <h5>我是父组件：{car}</h5>\n                <A render={(name) => <B name={name}/>}/>\n            </div>\n        );\n    }\n}\n\nclass A extends PureComponent {\n    state = {name: \"A\"}\n\n    render() {\n        return (\n            <div className=\"a\">\n                我是A组件\n                {this.props.render(this.state.name)}\n            </div>\n\n        )\n\n    }\n}\n\nclass B extends PureComponent {\n    render() {\n        return (\n            <div className=\"b\">\n                我是B组件\n                <span>我从A组件拿到的{this.props.name}</span>\n            </div>\n\n        )\n\n    }\n}\n\nexport default Parent;","import React, {Component} from 'react';\n\nclass Child extends Component {\n    //正确的值\n\n    /*state = {students:[\n        {id:'01',name:'Jack',age:18},\n        {id:'02',name:'Mary',age:18},\n        {id:'03',name:'Hani',age:18}\n        ]}*/\n\n    //错误的值\n    state={students:''}\n\n    render() {\n\n        const {students} = this.state\n        return (\n            <div className={this.props.className}>\n                <div>我是子组件</div>\n                {\n                    students.map(item=>{\n                        return (<p key={item.id}>{item.name}---{item.age}</p>)\n                    })\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default Child;","import React, {PureComponent} from 'react';\nimport Child from \"./Child\";\nimport './index.css'\n\nclass Parent extends PureComponent {\n    state = {\n        hasError: \"\",//用于标识子组件是否产生错误\n    }\n    //当子组件出现报错时，会触发调用，并携带错误信息\n    //state中的某些值永远取决于error\n    static getDerivedStateFromError(error) {\n        console.log('----error', error)\n        return {hasError: error}\n    }\n    componentDidCatch(error, errorInfo) {\n        console.log('此处统计错误，反馈给服务器，用户通知编码人员进行bug解决',error,errorInfo)\n    }\n\n    render() {\n        return (\n            <div className=\"parent\">\n                <h5>我是父组件</h5>\n                {/*在开发环境会显示一瞬间*/}\n                {this.state.hasError ? <h2>给用户的一个友好提示</h2> : <Child className=\"a\"/>}\n\n            </div>\n        );\n    }\n}\n\nexport default Parent;","import React, {Component, Fragment} from 'react';\nimport SetStateExtension from \"./components/01_setStateExtension\";\nimport LazyLoad from \"./components/02_lazyLoad\";\nimport StateHook from \"./components/03_stateHook\";\nimport EffectHook from \"./components/04_effectHook\";\nimport RefHook from \"./components/05_refHook\";\nimport A from \"./components/06_Context\";\nimport Optimize from \"./components/07_ComponentOptimiza\";\nimport RenderProp from \"./components/08_renderProp\";\nimport ErrorBoundary from \"./components/09_errorBoundary\";\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div style={{margin: \"20px\"}}>\n                <Fragment>\n                    <h2>setstate扩展</h2>\n                    <SetStateExtension/>\n                    <hr/>\n                    <h2>路由的lazyLoad</h2>\n                    <LazyLoad/>\n                    <hr/>\n                    <h2>StateHook</h2>\n                    <StateHook/>\n                    <hr/>\n                    <h2>EffectHook</h2>\n                    <EffectHook/>\n                    <hr/>\n                    <h2>RefHook</h2>\n                    <RefHook/>\n                    <hr/>\n                    <h2>Context</h2>\n                    <A/>\n                    <hr/>\n                    <h2>component优化</h2>\n                    <Optimize/>\n                    <hr/>\n                    <h2>renderProp(插槽)</h2>\n                    <RenderProp/>\n                    <hr/>\n                    <h2>错误边界</h2>\n                    <ErrorBoundary/>\n                </Fragment>\n            </div>\n\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// store.subscribe(() => {\n// //React.StrictMode 检查代码里不合理的位置\n//     ReactDOM.render(\n//         <React.StrictMode>\n//             <App store={store}/>\n//         </React.StrictMode>,\n//         document.getElementById('root')\n//     );\n//\n// })\n\n\n\n"],"sourceRoot":""}